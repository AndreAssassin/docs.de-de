### YamlMime:Tutorial
title: '<span data-ttu-id="c29b0-101">Einführung in C# 6: interaktives C#-Tutorial</span><span class="sxs-lookup"><span data-stu-id="c29b0-101">Explore C# 6 - C# interactive C# tutorial</span></span>'
metadata:
  title: 'Einführung in C# 6: Lernen Sie die neuen Features in C# 6 in einem interaktiven Tutorial im Browser kennen.'
  description: In diesem Tutorial verwenden Sie Ihren Browser, um C# 6 interaktiv kennenzulernen. Sie lernen die neuen Idiome von C# 6 kennen, mit denen Sie präziseren und lesbareren Code schreiben können.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: e1414c17cefd0fb31bb782a311e11dbd4cc056bb
  ms.sourcegitcommit: 093571de904fc7979e85ef3c048547d0accb1d8a
  ms.translationtype: HT
  ms.contentlocale: de-DE
  ms.lasthandoff: 09/06/2019
  ms.locfileid: "70394092"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="c29b0-105">In diesem Tutorial lernen Sie interaktiv die Grundlagen von C# 6 kennen, indem Sie mit Ihrem Browser C#-Code schreiben und die Ergebnisse der Kompilierung und Ausführung Ihres Codes sehen.</span><span class="sxs-lookup"><span data-stu-id="c29b0-105">This tutorial lets you explore C# 6 interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="c29b0-106">Einige Lektionen sind eine Abwandlung früherer C#-Übungen mit den neueren, präziseren Features von C# 6.</span><span class="sxs-lookup"><span data-stu-id="c29b0-106">It contains a series of lessons that modify earlier C# practices to use newer, more concise C# 6 features.</span></span> <span data-ttu-id="c29b0-107">Im weiteren Verlauf dieses Artikels finden Sie eine Übersicht über die einzelnen Features, in der jeweils ein Link enthalten ist, über den Sie weitere Informationen zum Feature erhalten.</span><span class="sxs-lookup"><span data-stu-id="c29b0-107">The rest of this article provides an overview of each of these features, with a link to explore each feature.</span></span>
- title: <span data-ttu-id="c29b0-108">Zulassen von schreibgeschütztem Verhalten mit schreibgeschützten automatisch implementierten Eigenschaften</span><span class="sxs-lookup"><span data-stu-id="c29b0-108">Read-only auto-properties enable read-only types</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"c29b0-109\">Durch die folgenden zwei Verbesserungen an der Syntax für automatisch implementierte Eigenschaften können Sie automatisch implementierte Eigenschaften problemlos vielseitiger einsetzen: schreibgeschützte automatisch implementierte Eigenschaften und Initialisierer für automatisch implementierte Eigenschaften.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-109\">Two enhancements to auto-property syntax make it easier to use auto-properties in more places: read-only auto-properties and auto-property initializers.</span></span> <span data-ttu-id=\"c29b0-110\">Sehen Sie sich dieses kleine Programm an:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-110\">Consider this small program:</span></span>\n\n[!code-csharp[Starter](../../../../samples/csharp/tutorials/exploration/csharp6-starter/Program.cs)]  \n\n    \n <span data-ttu-id=\"c29b0-111\">Starten Sie den Fokusmodus, und kopieren Sie den oben stehenden Code in der interaktive C#-Fenster.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-111\">Enter Focus mode, copy the preceding code into the C# interactive window.</span></span> <span data-ttu-id=\"c29b0-112\">Klicken Sie dann auf *Ausführen*, um zu sehen, was das Ergebnis des Codes ist.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-112\">Then, click *Run* to see what the code does.</span></span> <span data-ttu-id=\"c29b0-113\">`AllCaps` führt leider dazu, dass die Eigenschaftswerte gemeinsam mit der großgeschriebenen Zeichenfolge zurückgegeben werden.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-113\">`AllCaps` has the undesirable side effect of modifying the property values along with returning the uppercase string.</span></span> <span data-ttu-id=\"c29b0-114\">Eigentlich wollte der Autor der `Person`-Klasse, dass sie Zeichenfolgen `FirstName` und `LastName` schreibgeschützt sind.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-114\">The author of the `Person` class intended the strings for `FirstName` and `LastName` to be read-only.</span></span> <span data-ttu-id=\"c29b0-115\">Mit C# 6 kann man dies erreichen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-115\">With C# 6, you can make that intent clear.</span></span> <span data-ttu-id=\"c29b0-116\">Entfernen Sie `private set` aus beiden Eigenschaften, um eine schreibgeschützte automatisch implementierte Eigenschaft zu erstellen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-116\">Remove the `private set` from both properties to create a read-only auto property.</span></span> <span data-ttu-id=\"c29b0-117\">Klicken Sie auf *Ausführen*, und dann werden Sie sehen, dass der Compiler die beiden Positionen erkennt, an denen die Eigenschaften `FirstName` und `LastName` ungewollt geändert wurden.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-117\">Click *Run* to see that the compiler spots the two locations where the `FirstName` and `LastName` properties are changed when they should not have been.</span></span> <span data-ttu-id=\"c29b0-118\">Ändern Sie die `AllCaps`-Methode folgendermaßen, um den Compilerfehler zu beheben:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-118\">You can change the `AllCaps` method to the following code to fix the compiler error:</span></span>\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\n<span data-ttu-id=\"c29b0-119\">Mit dieser neuen Syntax stellt der Compiler sicher, dass die Eigenschaften unveränderlich sind.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-119\">Using this new syntax, the compiler ensures that the properties are immutable.</span></span>\n"
- title: <span data-ttu-id="c29b0-120">Initialisieren von Unterstützungsfeldern für automatisch implementierte Eigenschaften</span><span class="sxs-lookup"><span data-stu-id="c29b0-120">Initialize backing fields for auto-properties</span></span>
  durationInMinutes: 1
  content: "<span data-ttu-id=\"c29b0-121\">Mit der neuen Syntax in C# 6 können Sie Initialisierer für automatisch implementierte Eigenschaften verwenden.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-121\">New syntax in C# 6 enables you to use initializers for auto-properties.</span></span> <span data-ttu-id=\"c29b0-122\">Dies wird umso wichtiger je mehr Funktionen Klassen haben.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-122\">This becomes more important as classes grow new capabilities.</span></span> <span data-ttu-id=\"c29b0-123\">Fügen Sie eine Eigenschaft für einen Zweitnamen und einen Konstruktor hinzu, der Ihrer `Person`-Klasse drei Zeichenfolgen zuweist:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-123\">Add a middle name property, and a new constructor that takes three strings to your `Person` class:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#MiddleName)]  \n\n<span data-ttu-id=\"c29b0-124\">Die Zuweisung der `MiddleName`-Eigenschaft ist ein Initialisierer.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-124\">The assignment on the `MiddleName` property is an initializer.</span></span> <span data-ttu-id=\"c29b0-125\">Dieser initialisiert das vom Compiler generierte Unterstützungsfeld für den Zweitnamen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-125\">It initializes the compiler-generated backing field for the middle name.</span></span>\n"
- title: <span data-ttu-id="c29b0-126">Ausdruckskörpermember</span><span class="sxs-lookup"><span data-stu-id="c29b0-126">Expression-bodied members</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="c29b0-127">Ausdruckskörpermember bieten eine einfache Syntax für einfache Methoden.</span><span class="sxs-lookup"><span data-stu-id="c29b0-127">Expression-bodied members provide a lightweight syntax for lightweight methods.</span></span> <span data-ttu-id="c29b0-128">Die `Person`-Klasse hat zwei geeignete Kandidaten:</span><span class="sxs-lookup"><span data-stu-id="c29b0-128">The `Person` class has two great candidates.</span></span> <span data-ttu-id="c29b0-129">Sehen Sie sich die Deklaration von `ToString` an:</span><span class="sxs-lookup"><span data-stu-id="c29b0-129">Look at the declaration of `ToString`:</span></span>


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    <span data-ttu-id="c29b0-130">Ersetzen Sie die Deklaration von `ToString` durch den folgenden Code:</span><span class="sxs-lookup"><span data-stu-id="c29b0-130">Replace that declaration of `ToString` with the following code:</span></span>


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    <span data-ttu-id="c29b0-131">Versuchen Sie das gleiche mit der `AllCaps`-Methode.</span><span class="sxs-lookup"><span data-stu-id="c29b0-131">Try the same with the `AllCaps` method.</span></span> <span data-ttu-id="c29b0-132">Das ist zwar nur eine geringfügige Änderung, aber wenn Sie diese mit Bedacht einsetzen, schreiben Sie sehr viel lesbareren Code, insbesondere für Datenübertragungsobjekte und andere Typen mit geringem Verhalten.</span><span class="sxs-lookup"><span data-stu-id="c29b0-132">This is a small improvement, but when used wisely it creates much more readable code, especially for Data Transfer Objects (DTOs) and other types with minimal behavior.</span></span>
- title: <span data-ttu-id="c29b0-133">Importieren einer einzigen Klasse</span><span class="sxs-lookup"><span data-stu-id="c29b0-133">Importing a single class</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"c29b0-134\">Wenn Sie wiederholt eine statische Methoden einer Klasse im gesamten Code verwenden, wird Ihr Code unübersichtlich, wenn Sie den Klassennamen jedes Mal angeben.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-134\">If you repeatedly use one class' static methods throughout your code, including the class name each time obscures the meaning of your code.</span></span> <span data-ttu-id=\"c29b0-135\">Die `Person`-Klasse importiert aktuell den Namespace `System`, obwohl nur <xref:System.Console?displayProperty=nameWithType> verwendet wird.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-135\">The `Person` class currently imports the `System` namespace, even though only <xref:System.Console?displayProperty=nameWithType> is used.</span></span> <span data-ttu-id=\"c29b0-136\">Ändern Sie die `using`-Anweisung folgendermaßen:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-136\">Modify the `using` statement as follows:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#UsingStatic)]  \n\n<span data-ttu-id=\"c29b0-137\">Die `static using`-Anweisung ist in größeren Programmen nützlicher, die oft die gleiche Klasse mit vielen statischen Methoden verwenden, wie z. B. die Klassen [`string`](xref:System.String) und <xref:System.Math?displayProperty=nameWithType>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-137\">The `static using` statement becomes more useful in larger programs that make extensive use of a single class with many static methods, like the [`string`](xref:System.String) class or the <xref:System.Math?displayProperty=nameWithType> class.</span></span>\n"
- title: <span data-ttu-id="c29b0-138">Verbessertes Zeichenfolgenformat</span><span class="sxs-lookup"><span data-stu-id="c29b0-138">A better string format</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"c29b0-139\">C# 6 enthält eine neue Syntax zum Zusammensetzen von Zeichenfolgen aus einer Zeichenfolge und eingebetteten Ausdrücken, die mit dem Ziel evaluiert werden, andere Zeichenfolgenwerte auszugeben.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-139\">C# 6 contains new syntax for composing strings from a string and embedded expressions that are evaluated to produce other string values.</span></span> <span data-ttu-id=\"c29b0-140\">Ändern Sie die Methoden `ToString` und `AllCaps`, sodass die folgende Syntax verwendet wird:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-140\">You can change the `ToString` and `AllCaps` methods to use this syntax:</span></span>\n\n[!code-csharp[StringInterpolation](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#StringInterpolation)]  \n\n<span data-ttu-id=\"c29b0-141\">Sie schreiben anstelle positioneller Argumente zwischen `{` und `}` direkt C#-Ausdrücke.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-141\">Instead of positional arguments between the `{` and `}`, you write C# expressions directly.</span></span> <span data-ttu-id=\"c29b0-142\">Gehen sie genauso für die `Main`-Methode vor.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-142\">You can do the same in the `Main` method.</span></span> <span data-ttu-id=\"c29b0-143\">Ersetzen Sie den vorhandenen Code durch folgenden Code:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-143\">Replace the existing code with the following:</span></span>\n\n[!code-csharp[InterpolationMain](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#InterpolationMain)]  \n\n<span data-ttu-id=\"c29b0-144\">Sie sind nicht auf eine einzelne Variable in diesen Ausdrücken beschränkt.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-144\">You're not limited to a single variable in these expressions.</span></span> <span data-ttu-id=\"c29b0-145\">Sehen wir uns ein anderes Beispiel an. Wir passen dieses Beispiel an, um andere Ausdrücke zu veranschaulichen, die Sie mit der Zeichenfolgeninterpolation verwenden können.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-145\">Let's start with a new example and modify it to demonstrate other expressions you can use with string interpolation.</span></span> <span data-ttu-id=\"c29b0-146\">Führen Sie den folgenden Code im interaktiven Fenster in der `Main`-Methode aus:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-146\">Paste the following code into the interactive window in the `Main` method:</span></span>\n\n[!code-csharp[Phrases](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#Phrases)]  \n<span data-ttu-id=\"c29b0-147\">Dieser Code verwendet LINQ, daher müssen Sie die folgende using-Anweisung oben im interaktiven Fenster einfügen:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-147\">That uses LINQ, so you'll need to add the following using statement to the top of the interactive window:</span></span>\n\n```csharp\nusing System.Linq;\n```\n\n<span data-ttu-id=\"c29b0-148\">Sie können die lokale Variable `average` entfernen und diese Berechnung im Rahmen des interpolierten Zeichenfolgenausdrucks vornehmen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-148\">You can remove the local variable `average` and perform that calculation as part of the interpolated string expression.</span></span> <span data-ttu-id=\"c29b0-149\">Ersetzen Sie die letzten beiden Zeilen durch den folgenden Code:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-149\">Replace the last two lines with the following:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average()}\");\n```\n\n<span data-ttu-id=\"c29b0-150\">Sie bemerken vielleicht, dass die Ausgabe von `Average`, die im vorherigen Beispiel ausgeführt wird, mehr Dezimalstellen hat, als Ihnen lieb ist.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-150\">Running the preceding example, you would find that the output for `Average` has more decimal places than you would like.</span></span> <span data-ttu-id=\"c29b0-151\">Die Zeichenfolgen-Interpolationssyntax unterstützt alle verfügbaren Formatzeichenfolgen mithilfe der vorherigen Formatierungsmethoden.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-151\">The string interpolation syntax supports all the format strings available using earlier formatting methods.</span></span> <span data-ttu-id=\"c29b0-152\">Geben Sie die Formatzeichenfolge innerhalb der Klammern an.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-152\">You specify the format string inside the braces.</span></span> <span data-ttu-id=\"c29b0-153\">Fügen Sie ein `:` nach dem zu formatierenden Ausdruck ein:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-153\">Add a `:` following the expression to format:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average():F2}\");\n```\n"
- title: <span data-ttu-id="c29b0-154">Schnelle und einfache NULL-Prüfungen</span><span class="sxs-lookup"><span data-stu-id="c29b0-154">Quick and easy null checks</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"c29b0-155\">Der Operator `?.` (NULL-bedingt) vereinfacht das Schreiben von Logik, die `null`-Werte nahtlos berücksichtigt, ohne zusätzliche `if`-Prüfungen durchführen zu müssen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-155\">The `?.` (null conditional) operator makes it easier to write logic that takes `null` values into account seamlessly, without extra `if` checks.</span></span> <span data-ttu-id=\"c29b0-156\">Kopieren Sie zunächst den folgenden Code in das interaktive Fenster, und führen Sie ihn aus:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-156\">To explore the feature, start by copying the following code into the interactive window to try it:</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\n<span data-ttu-id=\"c29b0-157\">Dadurch wird eine <xref:System.NullReferenceException> ausgelöst.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-157\">It throws a <xref:System.NullReferenceException> when you run the sample.</span></span> <span data-ttu-id=\"c29b0-158\">Ändern Sie den Memberzugriffoperator `.` in den **NULL-bedingten Operator**:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-158\">Change the `.` member access operator to the **null conditional operator**:</span></span>\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\n<span data-ttu-id=\"c29b0-159\">Nach dieser Änderung gibt es keine Ausgabe.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-159\">After this change, there's no output.</span></span> <span data-ttu-id=\"c29b0-160\">Dies liegt daran, dass das Ergebnis von `s?.Length` ein `int?` ist, wenn das Ergebnis von `s.Length` ein `int` ist.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-160\">That's because the result of `s?.Length` is an `int?` when the result of `s.Length` is an `int`.</span></span> <span data-ttu-id=\"c29b0-161\">In diesem Beispiel ist `s?.Length` `null`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-161\">In this example, `s?.Length` is `null`.</span></span> <span data-ttu-id=\"c29b0-162\">Der Operator `?.` gibt `null` zurück, wenn dessen linker Operand `null` ist.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-162\">The `?.` returns `null` if its left operand is `null`.</span></span> <span data-ttu-id=\"c29b0-163\">Wenn der Typ des rechten Operanden ein Werttyp ist, gibt der Operator `?.` einen Nullable-Typ für diesen Typen zurück.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-163\">If the type of the right operand is a value type, the `?.` operator returns a nullable type for that type.</span></span> <span data-ttu-id=\"c29b0-164\">Neben `?.` können Sie auch `?[]` für Array- oder Indexerzugriff verwenden.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-164\">In addition to `?.` you can use `?[]` for array or indexer access.</span></span> <span data-ttu-id=\"c29b0-165\">Testen Sie den folgenden Code im interaktiven Fenster:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-165\">Try the following code in the interactive window:</span></span>\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n <span data-ttu-id=\"c29b0-166\">Mehrere bedingte Operatoren können in einem Ausdruck kombiniert werden.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-166\">Multiple conditional operators can be combined into a single expression.</span></span> <span data-ttu-id=\"c29b0-167\">Ein linker Operand, der `null` ist, führt zu einem `null`-Ergebnis, sodass Sie eingebettete if-Klauseln für den Zugriff auf Member von Membern vermeiden können.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-167\">A `null` left operand produces a `null` result, making it easy to avoid nested if clauses to access members of members.</span></span> <span data-ttu-id=\"c29b0-168\">Testen Sie z. B.den folgenden Code im interaktiven Fenster:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-168\">For example, try the following code in the interactive window:</span></span>\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue);\n ```\n\n <span data-ttu-id=\"c29b0-169\">Sie können dieses Beispiel noch vereinfachen, indem Sie den **NULL-Sammeloperator** verwenden, um einen Standardwert anzugeben:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-169\">The preceding example can be simplified by using the **null coalescing operator** to provide a default value:</span></span>\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n <span data-ttu-id=\"c29b0-170\">Mit dem **NULL-bedingten Operator** können Sie Code mit präziser Logik schreiben, während gleichzeitig nahtlos auf `null`-Werte geprüft wird.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-170\">The **null conditional operator** helps you write code that makes your core logic clear while seamlessly testing for `null` values.</span></span>\n"
- title: <span data-ttu-id="c29b0-171">Ausnahmefilter</span><span class="sxs-lookup"><span data-stu-id="c29b0-171">Exception filters</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"c29b0-172\">Mit Ausnahmefiltern können Sie Ausnahmen basierend auf Bedingungen abfangen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-172\">Exception filters enable you to catch an exception based on some condition.</span></span> <span data-ttu-id=\"c29b0-173\">Ein typisches Anwendungsgebiet sind z. B. Filtermethoden zum Erfassen aber nicht zum Behandeln von Ausnahmen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-173\">A typical use is to create a filter method that logs exceptions, but never handles those exceptions.</span></span> <span data-ttu-id=\"c29b0-174\">Ein Ausnahmefilter ist ein boolescher Ausdruck, der `true` ist, wenn die `catch`-Klausel ausgeführt werden soll, und der `false` ist, wenn die Ausnahme nicht von der `catch`-Klausel abgefangen werden soll.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-174\">An exception filter is a boolean expression that is `true` when the `catch` clause should be executed, and `false` when the exception should not be caught by the `catch` clause.</span></span> <span data-ttu-id=\"c29b0-175\">Testen Sie den folgenden Code im interaktiven Fenster: Dieser gibt den Ausnahmetyp und die Meldung in der Konsole aus.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-175\">Try the following code in the interactive window: It logs the exception type and message to the console.</span></span> <span data-ttu-id=\"c29b0-176\">Es wird `false` zurückgegeben, was bedeutet, dass die Ausnahme nicht behandelt werden kann.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-176\">It returns `false` which indicates that the exception can't be handled.</span></span> <span data-ttu-id=\"c29b0-177\">Testen Sie den folgenden Code im interaktiven Fenster.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-177\">Try the program in the interactive window.</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\n<span data-ttu-id=\"c29b0-178\">Die Meldung der `LogException`-Methode und die Standardmeldung für Ausnahmen sollten Ihnen nacheinander angezeigt werden.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-178\">You should see the message from the `LogException` method, followed by the default exception message.</span></span> <span data-ttu-id=\"c29b0-179\">Ändern Sie zum Vergleich den Ausdruck `return false` in `return true`, und führen Sie den Code erneut aus.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-179\">Just to experiment, change the `return false` statement to `return true` and run this again.</span></span> <span data-ttu-id=\"c29b0-180\">Jetzt wird die Ausnahme abgefangen und das Programm komplett ausgeführt.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-180\">Now, the exception is caught and the program runs to completion.</span></span>\n\n<span data-ttu-id=\"c29b0-181\">Neben dem Erfassen können Ausnahmefilter auch nützlich sein, wenn eine Eigenschaft der Ausnahme die erforderlichen Maßnahmen vorgibt.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-181\">Beyond logging scenarios, exception filters can be most useful when a property of the exception determines what action to take.</span></span> <span data-ttu-id=\"c29b0-182\">Sie können sich z. B. eine <xref:System.AggregateException> ansehen, um deren enthaltene Ausnahmen zu sehen und entsprechende Maßnahmen je nach Ausnahme ergreifen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-182\">For example, you can look inside an <xref:System.AggregateException> to see what the contained exceptions are and take some appropriate action depending on the specific exception.</span></span>\n"
- title: <span data-ttu-id="c29b0-183">Verwenden von nameof</span><span class="sxs-lookup"><span data-stu-id="c29b0-183">Using nameof</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"c29b0-184\">Der Operator `nameof` gibt den Namen einer beliebigen Variablen, eines Typs oder eines Members eines Typs zurück.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-184\">The `nameof` operator returns the name of any variable, a type, or a type's member.</span></span> <span data-ttu-id=\"c29b0-185\">Testen Sie den folgenden Code im interaktiven Fenster, und sehen Sie sich das Ergebnis an:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-185\">Try the following code in the interactive window to see how it works:</span></span>\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\n<span data-ttu-id=\"c29b0-186\">Die Ausgabe ist der Name der Variablen oder des Typs.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-186\">The output matches the name of the variable or type.</span></span> <span data-ttu-id=\"c29b0-187\">Selbst wenn Sie den vollqualifizierten Typnamen angegeben haben (z. B. `System.String`) gibt der `nameof`-Operator den nicht qualifizierten Namen zurück.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-187\">Even when you provided the fully qualified type name (such as `System.String`) the `nameof` operator returns the unqualified name.</span></span> <span data-ttu-id=\"c29b0-188\">Dieses Feature ist besonders nützlich, wenn Sie einen Parameter- oder Eigenschaftennamen in eine Zeichenfolge konvertieren möchten.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-188\">This feature is most useful when you need to convert a parameter or property name to a string.</span></span> <span data-ttu-id=\"c29b0-189\">Beispiele sind das Erfassen des Argumentnamens für das Auslösen einer <xref:System.ArgumentNullException> oder <xref:System.ArgumentException>, oder das Erfassen eines Namens einer geänderten Eigenschaft beim Implementieren von <xref:System.ComponentModel.INotifyPropertyChanged>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-189\">Examples include capturing the name of an argument for throwing a <xref:System.ArgumentNullException> or <xref:System.ArgumentException>, or capturing the name of a changed property when implementing <xref:System.ComponentModel.INotifyPropertyChanged>.</span></span> \n"
- title: <span data-ttu-id="c29b0-190">Syntax zum Initialisieren eines neuen Objekts</span><span class="sxs-lookup"><span data-stu-id="c29b0-190">New object initialization syntax</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"c29b0-191\">Die Syntax des Objektinitialisierers unterstützt jetzt die Initialisierung von *Indexern* und von Eigenschaften und Feldern.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-191\">Object initializer syntax now supports initializing *indexers* as well as properties and fields.</span></span> <span data-ttu-id=\"c29b0-192\">Aufgrund dieser Ergänzung wird das Initialisieren von Wörterbüchern und anderen Typen vereinfacht.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-192\">This addition makes it easier to initialize dictionaries and other types.</span></span> <span data-ttu-id=\"c29b0-193\">Beginnen Sie mit einem Wörterbuch.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-193\">Start with a dictionary.</span></span> <span data-ttu-id=\"c29b0-194\">Führen Sie den folgenden Code im interaktiven Fenster aus:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-194\">Run the following code in the interactive window:</span></span>\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\n<span data-ttu-id=\"c29b0-195\">Diese Syntax, mit der ein Wert in einem Indexer festgelegt wird, kann für jeden Typ verwendet werden, der in einem Indexer über einen zugänglichen set-Accessor verfügt.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-195\">This syntax, which sets a value in an indexer, can be used for any type that has an accessible set accessor on an indexer.</span></span>\n\n<span data-ttu-id=\"c29b0-196\">Dank einer zweiten Änderung wurde auch die Aktivierung der Initialisierersyntax für Typen vereinfacht, die Sequenzen darstellen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-196\">A second change makes it easier to enable initializer syntax for types that represent sequences.</span></span> <span data-ttu-id=\"c29b0-197\">Auflistungsinitialisierer können für alle Klassen verwendet werden, mit denen <xref:System.Collections.IEnumerable> implementiert wird und die über eine öffentlich zugängliche `Add`-Methode verfügen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-197\">Collection initializers can be used on any class that implements <xref:System.Collections.IEnumerable> and has a publicly accessible `Add` method.</span></span> <span data-ttu-id=\"c29b0-198\">Die `Add`-Methode kann jetzt eine Erweiterungsmethode sein.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-198\">That `Add` method can now be an extension method.</span></span> \n\n<span data-ttu-id=\"c29b0-199\">Im folgenden Beispiel wird ein Szenario für diese Syntax veranschaulicht.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-199\">The following example shows one scenario for this syntax.</span></span> <span data-ttu-id=\"c29b0-200\">Hierbei wird eine `Path`-Klasse erstellt, die `IEnumerable<Point3D>` implementiert und über eine Methode zum Hinzufügen von Punkten mit drei Argumenten verfügt.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-200\">It creates a `Path` class that implements `IEnumerable<Point3D>` and has a method to add points that take three arguments.</span></span> <span data-ttu-id=\"c29b0-201\">Mit der `Extensions`-Klasse wird eine zusätzliche `Add`-Methode zum Hinzufügen eines neuen Punkts aus den drei zugehörigen Komponenten erstellt.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-201\">The `Extensions` class creates an additional `Add` method to add a new point from its three components.</span></span> <span data-ttu-id=\"c29b0-202\">Aufgrund von Einschränkungen in der Umgebung kann dieses Beispiel derzeit nicht interaktiv ausgeführt werden.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c29b0-202\">This sample does not currently run interactively due to restrictions in the environment.</span></span>\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: <span data-ttu-id="c29b0-203">Damit haben Sie die Einführung in die neuen Features in C# 6 abgeschlossen.</span><span class="sxs-lookup"><span data-stu-id="c29b0-203">You've completed an exploration of the new features in C# 6.</span></span> <span data-ttu-id="c29b0-204">Jetzt können Sie sie selbst in Ihrer eigenen Anwendung ausprobieren.</span><span class="sxs-lookup"><span data-stu-id="c29b0-204">Now try them yourself in your applications.</span></span>
