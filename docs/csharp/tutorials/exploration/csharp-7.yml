### YamlMime:Tutorial
title: 'Einführung in C# 7.0: interaktives C#-Tutorial'
metadata:
  title: 'Einführung in C# 7.0: Lernen Sie die neuen Funktionen von C# 7.0 in einem interaktiven Tutorial in Ihrem Browser kennen.'
  description: In diesem Tutorial verwenden Sie Ihren Browser, um C# 7.0 interaktiv kennenzulernen. Sie lernen die neuen Idiome von C# 7.0 kennen, mit denen Sie präziseren und besser lesbaren Code schreiben können.
  audience: Developer
  level: intermediate
  ms.date: 03/20/2019
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 1b1de22769c86f75684f41635287a73558d1d15a
  ms.sourcegitcommit: 2701302a99cafbe0d86d53d540eb0fa7e9b46b36
  ms.translationtype: HT
  ms.contentlocale: de-DE
  ms.lasthandoff: 04/28/2019
  ms.locfileid: "64750381"
items:
- durationInMinutes: 1
  content: >
    In diesem interaktiven Tutorial lernen Sie die Funktionen von C# 7.0 kennen, indem Sie mit Ihrem Browser C#-Code schreiben und die Ergebnisse der Kompilierung und Ausführung Ihres Codes sehen. Einige Lektionen sind eine Abwandlung früherer C#-Methoden mit den neueren, präziseren Funktionen von C# 7.0. Im weiteren Verlauf dieses Artikels finden Sie eine Übersicht über die einzelnen Features, in der jeweils ein Link enthalten ist, über den Sie weitere Informationen zum Feature erhalten.
- title: Deklarationen von out-Variablen am Speicherort der Zuweisung
  durationInMinutes: 2
  content: "Die vorhandene Syntax zur Unterstützung von `out`-Parametern wurde in dieser Version verbessert. Klicken Sie auf die Schaltfläche *Enter Focus Mode (Fokusmodus aktivieren)* unten auf dieser Seite, und testen Sie dann den folgenden Code im interaktiven Fenster: \n\n[!code-csharp[OutVariableOldStyle](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableOldStyle \"classic out variable declaration\")]\n\nNun können Sie `out`-Variablen in der Argumentliste eines Methodenaufrufs deklarieren, anstatt eine separate Deklarationsanweisung zu schreiben. Sie können die Deklaration in den Methodenaufruf verschieben. Fügen Sie im interaktiven Fenster unten den folgenden Code hinzu:\n\n[!code-csharp[OutVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableDeclarations \"Out variable declarations\")]\n\nSie können die `int`-Deklaration in eine `var`-Deklaration ändern. Fügen Sie dem interaktiven Fenster den folgenden Code hinzu:\n\n[!code-csharp[OutVarVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVarVariableDeclarations \"Implicitly typed Out variable\")]\n\nDie neue Syntax bietet zwei wichtige Vorteile gegenüber der bisherigen Syntax:\n\n* Der Code ist einfacher zu lesen. \n    - Sie deklarieren die out-Variable, wenn Sie sie verwenden, nicht in einer anderen Zeile weiter oben.\n* Sie müssen keinen Anfangswert zuweisen.\n    - Durch das Deklarieren der `out`-Variable, wenn sie in einem Methodenaufruf verwendet wird, können Sie sie nicht versehentlich verwenden, bevor sie zugewiesen wurde.\n\nDer Bereich der deklarierten Variable entspricht dem Bereich, der die `if`-Anweisung einschließt. Dadurch können Sie die Variable anschließend verwenden. Ändern Sie den letzten `if`-Block wie im folgenden Codeausschnitt gezeigt:\n\n```csharp\nif (!int.TryParse(input, out int result))\n{    \n    return null;\n}\n\nConsole.WriteLine(result);\n```\n"
- title: Tupel erstellen einfache Datenstrukturen
  durationInMinutes: 1
  content: "Tupel sind einfache Datenstrukturen, die mehrere Felder zur Darstellung der Datenmember enthalten. Die Felder werden nicht überprüft, und Sie können keine eigenen Methoden definieren.\n\n> [!NOTE]\n> Tupel waren schon vor C# 7.0 verfügbar, sie waren jedoch ineffizient und hatten keine Sprachunterstützung. Das brachte mit sich, dass auf Tupelelemente nur als `Item1`, `Item2` usw. verwiesen werden konnte. Mit C# 7.0 wird Sprachunterstützung für Tupel eingeführt, wodurch semantische Namen für die Felder eines Tupels mithilfe neuer, effizienterer Tupeltypen möglich werden.\n\nSie können ein Tupel erstellen, indem Sie jedem benannten Member einen Wert zuweisen:\n\n[!code-csharp[NamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#NamedTuple \"Named tuple\")]\n\nDas `namedLetters`-Tupel enthält Felder, die als `Alpha` und `Beta` bezeichnet werden. Diese Namen bestehen nur zur Kompilierzeit und werden zur Laufzeit nicht beibehalten (wenn das Tupel beispielsweise mithilfe von Reflektion untersucht wird).\n\nIn einer Tupelzuweisung können Sie auch die Namen der Felder auf der rechten Seite der Zuweisung angeben: \n\n[!code-csharp[ImplicitNamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#ImplicitNamedTuple \"Implicitly named tuple\")]\n\nSie können Namen für die Felder auf der linken und rechten Seite der Zuweisung angeben, jedoch werden die Namen auf der rechten Seite ignoriert.\n\nTupel sind am nützlichsten als Rückgabetypen für `private`- und `internal`-Methoden. Mit Tupeln können diese Methoden in einfacher Syntax mehrere diskrete Werte zurückgeben.\n\nEin Tupel zu erstellen, ist effizienter und produktiver als das Erstellen einer Klasse oder Struktur. Es besitzt eine einfachere Syntax, um eine Datenstruktur mit mehr als einem Wert zu definieren. Die folgende Beispielmethode gibt die minimalen und maximalen Werte in einer Sequenz von ganzen Zahlen zurück. Fügen Sie zum Testen den folgenden Code im Browser hinzu:\n\n[!code-csharp[TupleReturningMethod](~/samples/snippets/csharp/new-in-7/program.cs#TupleReturningMethod \"Tuple returning method\")]\n\nManchmal möchten Sie vielleicht die Member eines Tupels entpacken, die von einer Methode zurückgegeben wurden.  Sie können dazu für jeden Wert im Tupel separate Variablen deklarieren. Dies wird als *Dekonstruieren* des Tupels bezeichnet. Fügen Sie zum Testen den folgenden Code im Browser hinzu:\n\n[!code-csharp[CallingWithDeconstructor](~/samples/snippets/csharp/new-in-7/program.cs#CallingWithDeconstructor \"Deconstructing a tuple\")]\n\nBei der Arbeit mit Tupeln werden Sie feststellen, dass nicht alle Member eines Tupelergebnisses verwendet werden. In diesem Fall können Sie einen oder mehrere der zurückgegebenen Werte verwerfen, indem Sie anstelle einer Variablen `_` verwenden. Fügen Sie zum Testen den folgenden Code im Browser hinzu:\n\n[!code-csharp[DiscardTupleMember](~/samples/snippets/csharp/new-in-7/program.cs#DiscardMember \"Discard a tuple member\")]\n\nAusführliche Informationen zu Tupeln finden Sie im Artikel zu [Tupeln](../../tuples.md).\nWeitere Informationen zum Verwerfen von Elementen finden Sie im Artikel zum Thema [Verwerfen](../../discards.md).\n"
- title: Verwenden des Typmusters mit dem Is-Ausdruck
  durationInMinutes: 2
  content: >
    Der Musterausdruck `is` erweitert den vertrauten [`is`-Operator](../../language-reference/keywords/is.md#pattern-matching-with-is), um ein Objekt über dessen Typ hinaus abzufragen.


    Testen Sie den folgenden Code in Ihrem Browser:


    [!code-csharp[SimpleIs](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleIsPattern "Simple Is pattern")]


    Ändern Sie die Variablendeklaration in eine Zeichenfolge:


    ```csharp

    object count = "5";

    ```


    Jetzt ist der `is`-Ausdruck FALSE, weshalb die `else`-Verzweigung ausgeführt wird. Versuchen Sie, `count` in der Else-Verzweigung in `number` zu ändern:


    ```csharp

    Console.WriteLine($"{number} is not an integer");

    ```


    Der oben genannte Code wird nicht kompiliert, da `number` in der `else`-Verzweigung nicht zugewiesen ist. Es ist nur in der `true`-Verzweigung der `if`-Anweisung zugewiesen.


    Das Typmuster des `is`-Ausdrucks ist nützlich, wenn eine kleine Anzahl von Typen getestet werden soll. Häufig müssen jedoch mehrere Typen getestet werden. Dafür wird die `switch`-Anweisung für den Musterabgleich benötigt.
- title: Musterabgleich in der Switch-Anweisung
  durationInMinutes: 2
  content: >
    Der *Vergleichsausdruck* verfügt über eine vertraute Syntax, die auf der `switch`-Anweisung basiert, die bereits Teil der C#-Sprache ist. Das folgende Beispiel basiert auf einer `is`-Ausdruckssyntax, die Sie auf der vorherigen Seite kennengelernt haben:


    [!code-csharp[SimpleSwitch](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleSwitchPattern "simple switch")]


    Der vorhergehende Code sucht nach `int` oder `null`. Jeder andere Typ hat die Standardanfrage erreicht. Fügen Sie die folgenden beiden Zeilen hinzu, um das Verhalten zu überprüfen:


    [!code-csharp[AddLongCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestLong "Add a case for long")]


    Der `switch`-Ausdruck konvertiert einen Nullable-Typ in den entsprechenden Typ. Fügen Sie zur Überprüfung die folgenden Zeilen hinzu:


    [!code-csharp[NullableCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#NullableSwitch "Add a nullable case")]


    Switch-Anweisungen können beliebig viele andere Typmusterausdrücke hinzufügt werden. Fügen Sie diese vor der `null`-Anfrage hinzu:


    [!code-csharp[MoreTypeCases](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreCases "Add more type cases")]


    Stellen Sie sicher, dass die Ausdrücke funktionieren, indem Sie die folgenden Tests hinzufügen:


    [!code-csharp[AddMoreTests](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreTests "Add more type tests")]


    Die Vergleichsausdrücke unterstützen auch Konstanten. Dies kann durch das Ausklammern von einfachen Fällen Zeit sparen:


    [!code-csharp[ConstantCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#ConstantCase "Add a constant case")]


    Die vorherige Anfrage muss *vor* dem `case int:`-Ausdruck hinzugefügt werden. Wird sie nach der Anfrage hinzugefügt, erhalten Sie eine Compilermeldung mit der Warnung, dass der Ausdruck bereits von einer vorherigen Anfrage behandelt wurde.


    Sie können einer beliebigen Musterabfrage eine `when`-Klausel hinzufügen, damit Sie auch andere Bedingungen als einen Typ oder konstanten Wert testen können. Fügen Sie die folgende Anfrage zum Testen oberhalb der allgemeinen `string`-Anfrage hinzu:


    [!code-csharp[WhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#WhenClause "Add a when clause")]


    Der Test könnte etwa folgendermaßen aussehen:


    [!code-csharp[TestWhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestWhenClause "Test the when clause")]


    Die neue Syntax für Mustervergleichsausdrücke erleichtert das Erstellen von Verteilungsalgorithmen mit einer klaren und präzisen Syntax auf der Basis des Typs oder anderer Eigenschaften eines Objekts. Mustervergleichsausdrücke ermöglichen diese Konstrukte auf Datentypen, die durch Vererbung nicht verbunden sind.


    Weitere Informationen zum Mustervergleich finden Sie im Artikel zum [Mustervergleich in C#](../../pattern-matching.md).
- title: Optimieren des Arbeitsspeichers mithilfe von lokalen ref-Variablen und Rückgabetypen
  durationInMinutes: 2
  content: >
    Diese Funktion ermöglicht Algorithmen, die Verweise auf Variablen verwenden und zurückgeben, die an anderer Stelle definiert sind. Ein Beispiel ist das Arbeiten mit großen Matrizen und die Suche nach einem einzigen Ort mit bestimmten Eigenschaften. Eine Methode gibt die zwei Indizes für einen einzigen Speicherort in der Matrix zurück:


    [!code-csharp[EverythingByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#EverythingByValue "return indices by value")]


    Sie können diese Methode mit dem folgenden Code testen:


    [!code-csharp[TestByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByValue "test code for return indices by value")]



    Diese `Find`-Methode gibt die Indizes an das Element in der Matrix zurück. Daraus ergibt sich, dass Aufrufer Code schreiben, der mit diesen Indizes die Matrix dereferenziert und ein einzelnes Element ändert. Sie würden eher eine Methode schreiben, die einen *Verweis* auf das Element der Matrix zurückgibt, die Sie ändern möchten.


    Betrachten wir nun eine Reihe von Änderungen, um die lokale ref-Funktion zu präsentieren und zu zeigen, wie Sie eine Methode erstellen, die einen Verweis auf den internen Speicher zurückgibt. Nebenbei lernen Sie die Regeln der ref-Rückgabe und der lokalen ref-Funktion kennen, damit Sie diese nicht versehentlich falsch verwenden.


    Ändern Sie zuerst die `Find`-Methodendeklaration, sodass sie eine `ref int` anstelle eines Tupels zurückgibt.


    ```csharp

    ref int Find(int[,] matrix, Func<int, bool> predicate)

    ```


    Ändern Sie die return-Anweisung, damit das Element an die richtigen Indizes zurückgegeben wird:


    ```csharp

    return matrix[i,j];

    ```


    Ändern Sie die letzte Rückgabe, sodass stattdessen eine Ausnahme ausgelöst wird:


    ```csharp

    throw new InvalidOperationException("Not found");

    ```


    Beachten Sie, dass der Code so nicht kompiliert wird. Die Methodendeklaration gibt eine `ref`-Rückgabe an, die return-Anweisung jedoch die Rückgabe eines Werts. Sie müssen jeder return-Anweisung das `ref`-Schlüsselwort hinzufügen. So wird die Rückgabe durch Verweis angegeben, sodass Entwickler später beim Lesen des Codes wissen, dass die Methode durch Verweis zurückgibt:


    ```csharp

    return ref matrix[i,j];

    ```


    Nun gibt die Methode einen Verweis auf den ganzzahligen Wert in der Matrix zurück, und Sie müssen ändern, wo sie aufgerufen wird. Die `var`-Deklaration bedeutet, dass `valItem` jetzt eine `int` anstatt eines Tupels ist. Ändern Sie den aufrufenden Code in den folgenden Code:


    ```csharp

    var valItem = Find(matrix, (val) => val == 42);

    Console.WriteLine(valItem);

    valItem = 24;

    Console.WriteLine(matrix[4, 2]);

    ```


    Die zweite `WriteLine`-Anweisung im obigen Beispiel gibt den Wert `42` aus und nicht `24`. Die Variable `valItem` ist eine `int` und nicht eine `ref int`. Durch das `var`-Schlüsselwort kann der Compiler den Typ angeben, fügt jedoch nicht implizit den `ref`-Modifizierer hinzu. Stattdessen wird der Wert, auf den `ref return` verweist, an die Variable auf der linken Seite der Zuweisung *kopiert*. Die Variable ist keine lokale `ref`.


    Damit der zurückgegebene Verweis geändert werden kann, müssen Sie den `ref`-Modifizierer der Deklaration der lokalen Variablen vor dem Aufruf von `Find` hinzufügen, um aus der Variable einen Verweis herzustellen, wenn der Rückgabewert ein Verweis ist. Ändern Sie den Testcode in Ihrem Browser in den folgenden Code:


    [!code-csharp[EverythingByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByValue "test code for return object by reference")]


    Nun gibt die zweite `WriteLine`-Anweisung im obigen Beispiel den Wert `24` aus, der angibt, dass der Speicher in der Matrix geändert wurde. Die lokale Variable wurde mit dem `ref`-Modifizierer deklariert und nimmt eine `ref`-Rückgabe an. Sie müssen eine `ref`-Variable initialisieren, wenn sie deklariert wird. Deklaration und Initialisierung können nicht voneinander getrennt werden.


    Die C#-Sprache verfügt über drei weitere Regeln, die Sie vor der falschen Verwendung der lokalen `ref`-Variablen und Rückgaben schützen:


    * Sie können einer lokalen `ref`-Variablen keinen Standard-Methodenrückgabewert zuweisen.

    * Sie können eine `ref` nicht an eine Variable zurückgeben, deren Lebensdauer sich nicht über die Ausführung der Methode hinaus erstreckt.

    * Lokale `ref`-Variablen und Rückgabewerte können nicht in Verbindung mit asynchronen Methoden verwendet werden.


    Das Hinzufügen von lokalen ref-Variablen und ref-Rückgaben ermöglicht effizientere Algorithmen, da Werte nicht kopiert oder dereferenzierende Vorgänge nicht mehrmals ausgeführt werden.


    Weitere Informationen finden Sie im Artikel [Schlüsselwort „ref“](../../language-reference/keywords/ref.md).
- title: Minimieren des Zugriffs auf Code mit lokalen Funktionen
  durationInMinutes: 2
  content: "Sie können nun lokale Funktionen deklarieren, die in anderen Funktionen geschachtelt sind. Dadurch können Sie die Sichtbarkeit dieser Funktionen minimieren. Lokale Funktionen besitzen drei offensichtliche Anwendungsfälle:\n\n- Rekursive Funktionen.\n- Iteratormethoden\n- Asynchrone Methoden\n\nBeginnen wir mit rekursiven Methoden. Geben Sie den folgenden Code zum Testen in den Browser ein, um (die Fakultät von) `6!` zu berechnen:\n\n```csharp\nint LocalFunctionFactorial(int n)\n{\n    return nthFactorial(n);\n\n    int nthFactorial(int number) => (number < 2) ? \n        1 : number * nthFactorial(number - 1);\n}\n\nConsole.WriteLine(LocalFunctionFactorial(6));\n```\n\nLokale Funktionen eignen sich hervorragend zur Implementierung rekursiver Algorithmen. Weitere Verwendungsmöglichkeiten sind öffentliche Iterator- und öffentliche asynchrone Methoden. Mit beiden Arten von Methoden wird Code generiert, der Fehler später meldet, als Programmierer es erwarten würden. Bei Iteratormethoden werden Ausnahmen nur festgestellt, wenn Code aufgerufen wird, der die zurückgegebene Sequenz auflistet. Bei asynchronen Methoden werden Ausnahmen nur festgestellt, wenn der zurückgegebene `Task` erwartet wird.\n\nDa sich Iteratormethoden einfacher im Browser untersuchen lassen, werden sie für diese Untersuchung verwendet. Rufen Sie mit dem folgenden Code eine Iteratormethode in Ihrem Browser auf:\n\n[!code-csharp[IteratorMethod](~/samples/snippets/csharp/new-in-7/Iterator.cs#SnippetIteratorMethod \"Iterator method\")]\n\nFühren Sie den Code aus. Beachten Sie, dass die Ausnahme ausgelöst wird, wenn der Code mit dem Durchlaufen des zweiten Resultsets beginnt. Der Code, der das erste Resultset durchläuft, wurde bereits ausgeführt. Da dieses Beispiel klein ist und keine Datenstrukturen verändert, ist es harmlos und leicht zu beheben. In einem größeren Programm, bei dem die beiden Iteratorobjekte in unterschiedlichen untergeordneten Methoden erstellt werden können, ist die Ursache möglicherweise schwer zu finden. Wenn die erste Iteratormethode den Datenstatus geändert hat, kann es sogar zu einer Datenbeschädigung kommen. Daher wäre es wünschenswert, dass die Ausnahme sofort ausgelöst wird, bevor mit der Arbeit begonnen wird. Sie können den Code so umgestalten, dass die öffentliche Methode alle Argumente überprüft und eine lokale Funktion die Enumeration ausführt:\n\n[!code-csharp[IteratorMethodRefactored](~/samples/snippets/csharp/new-in-7/Iterator.cs#IteratorMethodLocalInteractive \"Iterator method refactored\")]\n\nDie vorhergehende Version macht deutlich, dass auf die lokale Methode nur im Kontext der äußeren Methode verwiesen wird. Die Regeln für lokale Funktionen stellen auch sicher, dass ein Entwickler nicht versehentlich die lokale Funktion von einem anderen Speicherort in der Klasse aufrufen und die Argumentüberprüfung umgehen kann.\n\nDas gleiche Verfahren kann bei `async`-Methoden eingesetzt werden, um sicherzustellen, dass Ausnahmen aufgrund der Argumentüberprüfung ausgelöst werden, bevor mit der asynchronen Arbeit begonnen wird.\n\n> [!NOTE]\n> Einige der Entwürfe, die von lokalen Funktionen unterstützt werden, könnten auch mithilfe von *Lambdaausdrücken* erreicht werden. Weitere Informationen zu den Unterschieden finden Sie im Artikel zu den [Unterschieden zwischen lokalen Funktionen und Lambdaausdrücken](../../local-functions-vs-lambdas.md).\n"
- content: Damit haben Sie die Einführung in die wichtigsten neuen Features in C# 7 abgeschlossen. Jetzt können Sie sie selbst in Ihrer eigenen Anwendung ausprobieren. Die vollständige Liste der Neuerungen finden Sie im Artikel [Neues in C# 7](../../whats-new/csharp-7.md).
