### YamlMime:Tutorial
title: <span data-ttu-id="ca14d-101">Erfahren Sie mehr über die bedingte Logik mit Verzweigungs- und Schleifenanweisungen.</span><span class="sxs-lookup"><span data-stu-id="ca14d-101">Learn conditional logic with branch and loop statements</span></span>
metadata:
  title: Verzweigungen und Schleifen – Einführung in das interaktive C#-Tutorial
  description: In diesem Tutorial zu Verzweigungen und Schleifen verwenden Sie Ihren Browser, um sich interaktiv mit C# vertraut zu machen. Sie schreiben direkt im Browser C#-Code und sehen dort die Ergebnisse der Kompilierung und Ausführung Ihres Codes.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="ca14d-105">Die Listensammlung</span><span class="sxs-lookup"><span data-stu-id="ca14d-105">The list collection</span></span>
  ms.openlocfilehash: 445017337663aea428af2f8dcd4027d716d05751
  ms.sourcegitcommit: dfd612ba454ce775a766bcc6fe93bc1d43dfda47
  ms.translationtype: HT
  ms.contentlocale: de-DE
  ms.lasthandoff: 10/09/2019
  ms.locfileid: "72179886"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="ca14d-106">In diesem Tutorial erfahren Sie, wie Sie einen Code schreiben, der Variablen untersucht und basierend auf diesen Variablen den Ausführungspfad ändert.</span><span class="sxs-lookup"><span data-stu-id="ca14d-106">This tutorial teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="ca14d-107">Sie verwenden Ihren Browser zum interaktiven Schreiben von C#-Code und sehen im Browser die Ergebnisse der Kompilierung und Ausführung Ihres Codes.</span><span class="sxs-lookup"><span data-stu-id="ca14d-107">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id="ca14d-108">Dieses Tutorial enthält eine Reihe von Lektionen, in denen Verzweigungs- und Schleifenkonstrukte in C# erkundet werden.</span><span class="sxs-lookup"><span data-stu-id="ca14d-108">This tutorial contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="ca14d-109">In diesen Lektionen lernen Sie die Grundlagen der Programmiersprache C# kennen.</span><span class="sxs-lookup"><span data-stu-id="ca14d-109">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="ca14d-110">Treffen von Entscheidungen mithilfe der if-Anweisung</span><span class="sxs-lookup"><span data-stu-id="ca14d-110">Make decisions using the if statement</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="ca14d-111">Führen Sie den folgenden Code im interaktiven Fenster aus.</span><span class="sxs-lookup"><span data-stu-id="ca14d-111">Run the following code in the interactive window.</span></span> <span data-ttu-id="ca14d-112">Geben Sie hierfür den folgenden Codeblock in das interaktive Fenster ein, und klicken Sie auf die Schaltfläche **Ausführen**:</span><span class="sxs-lookup"><span data-stu-id="ca14d-112">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    <span data-ttu-id="ca14d-113">Wenn Sie dies in Ihrer Umgebung ausführen, sollten Sie stattdessen die Anleitungen für die [lokale Version](branches-and-loops-local.md) befolgen.</span><span class="sxs-lookup"><span data-stu-id="ca14d-113">If you are running this on your environment, you should follow the instructions for the [local version](branches-and-loops-local.md) instead.</span></span>


    <span data-ttu-id="ca14d-114">Ändern Sie die Deklaration von `b` so, dass die Summe kleiner als 10 ist:</span><span class="sxs-lookup"><span data-stu-id="ca14d-114">Modify the declaration of `b` so that the sum is less than 10:</span></span>


    ```csharp

    int b = 3;

    ```


    <span data-ttu-id="ca14d-115">Klicken Sie erneut auf die Schaltfläche **Ausführen**.</span><span class="sxs-lookup"><span data-stu-id="ca14d-115">Click the **Run** button again.</span></span> <span data-ttu-id="ca14d-116">Da die Antwort kleiner als 10 ist, wird nichts ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="ca14d-116">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="ca14d-117">Die von Ihnen getestete **Bedingung** ist falsch.</span><span class="sxs-lookup"><span data-stu-id="ca14d-117">The **condition** you're testing is false.</span></span> <span data-ttu-id="ca14d-118">Es ist kein Code auszuführen, da Sie lediglich eine der möglichen Verzweigungen für eine `if`-Anweisung geschrieben haben: die true-Verzweigung.</span><span class="sxs-lookup"><span data-stu-id="ca14d-118">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>


    > [!TIP]

    > <span data-ttu-id="ca14d-119">Bei Ihren ersten Schritten mit C# (oder einer anderen Programmiersprache) kann es zu Fehlern kommen, wenn Sie Codes schreiben.</span><span class="sxs-lookup"><span data-stu-id="ca14d-119">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="ca14d-120">Der **Compiler** findet diese Fehler und meldet diese.</span><span class="sxs-lookup"><span data-stu-id="ca14d-120">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="ca14d-121">Sollte die Ausgabe Fehlermeldungen enthalten, sehen Sie sich den Beispielcode und den Code im interaktiven Fenster an, um festzustellen, was behoben werden muss.</span><span class="sxs-lookup"><span data-stu-id="ca14d-121">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="ca14d-122">Durch diese Übung lernen Sie die Struktur eines C#-Codes kennen.</span><span class="sxs-lookup"><span data-stu-id="ca14d-122">That exercise will help you learn the structure of C# code.</span></span>


    <span data-ttu-id="ca14d-123">Das erste Beispiel veranschaulicht die Vorteile von `if`-Anweisungen und boolean-Typen.</span><span class="sxs-lookup"><span data-stu-id="ca14d-123">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="ca14d-124">Ein *boolean*-Typ ist eine Variable, die einen der folgenden zwei Werte enthalten kann: `true` oder `false`.</span><span class="sxs-lookup"><span data-stu-id="ca14d-124">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="ca14d-125">In C# ist ein besonderer Typ für boolesche Variablen, `bool`, definiert.</span><span class="sxs-lookup"><span data-stu-id="ca14d-125">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="ca14d-126">Die `if`-Anweisung überprüft den Wert eines `bool`-Typs.</span><span class="sxs-lookup"><span data-stu-id="ca14d-126">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="ca14d-127">Wenn der Wert `true` lautet, wird die nach `if` folgende Anweisung ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="ca14d-127">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="ca14d-128">Andernfalls wird diese übersprungen.</span><span class="sxs-lookup"><span data-stu-id="ca14d-128">Otherwise, it is skipped.</span></span>


    <span data-ttu-id="ca14d-129">Dieser Vorgang zum Überprüfen von Bedingungen und Ausführen von Anweisungen basierend auf diesen Bedingungen ist sehr nützlich.</span><span class="sxs-lookup"><span data-stu-id="ca14d-129">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="ca14d-130">Sehen wir uns dies einmal näher an.</span><span class="sxs-lookup"><span data-stu-id="ca14d-130">Let's explore more.</span></span>


    > [!NOTE]

    > <span data-ttu-id="ca14d-131">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="ca14d-131">This online coding experience is in preview mode.</span></span> <span data-ttu-id="ca14d-132">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="ca14d-132">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="ca14d-133">Kombinieren von if- und else-Anweisungen</span><span class="sxs-lookup"><span data-stu-id="ca14d-133">Make if and else work together</span></span>
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"ca14d-134\">Um einen anderen Code in den true- und false-Verzweigungen auszuführen, erstellen Sie eine `else`-Verzweigung, die ausgeführt wird, wenn die Bedingung falsch ist.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-134\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"ca14d-135\">Testen Sie Folgendes:</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-135\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"ca14d-136\">Die Anweisung, die nach dem Schlüsselwort `else` folgt, wird nur ausgeführt, wenn die zu testende Bedingung `false` lautet.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-136\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"ca14d-137\">Wenn Sie `if` und `else` mit booleschen Bedingungen kombinieren, erhalten Sie sozusagen das Beste aus beiden Welten.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-137\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"ca14d-138\">Der Einzug unter den `if`- und `else`-Anweisungen dient zur besseren Lesbarkeit.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-138\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"ca14d-139\">In der Programmiersprache C# werden Einzüge oder Leerräume nicht berücksichtigt.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-139\">The C# language doesn't treat indentation or white space as significant.</span></span>\n> <span data-ttu-id=\"ca14d-140\">Die Anweisung nach dem Schlüsselwort `if` bzw. `else` wird basierend auf der Bedingung ausgeführt.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-140\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"ca14d-141\">Alle Beispiele in diesem Tutorial folgen der gängigen Vorgehensweise, Zeilen basierend auf der Ablaufsteuerung von Anweisungen mit einem Einzug zu versehen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-141\">All the samples in this tutorial follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"ca14d-142\">Da Einzüge nicht relevant sind, müssen Sie mit `{` und `}` angeben, dass Sie mehr als eine Anweisung im Rahmen des bedingt ausgeführten Blocks verwenden möchten.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-142\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"ca14d-143\">C#-Programmierer verwenden solche geschweifte Klammern in der Regel bei allen `if`- und `else`-Anweisungen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-143\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"ca14d-144\">Das folgende Beispiel ist identisch mit dem Inhalt, den Sie soeben erstellt haben.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-144\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"ca14d-145\">Probieren Sie es aus!</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-145\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"ca14d-146\">Im restlichen Tutorial enthalten alle Codebeispiele geschweifte Klammern gemäß den allgemein gültigen Vorgehensweisen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-146\">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"ca14d-147\">Sie können kompliziertere Bedingungen testen:</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-147\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"ca14d-148\">Die `==`-Symboltests für *Gleichheit*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-148\">The `==` symbol tests for *equality*.</span></span> <span data-ttu-id=\"ca14d-149\">Die Verwendung von `==` unterscheidet den Test auf Gleichheit von der Zuweisung, die Sie in `a = 5` gesehen haben.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-149\">Using `==` distinguishes the test for equality from assignment, which you saw in `a = 5`.</span></span>\n\n<span data-ttu-id=\"ca14d-150\">Das Zeichen `&&` steht für „and“.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-150\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"ca14d-151\">Es bedeutet, dass beide Bedingungen „true“ lauten müssen, damit die Anweisung in der true-Verzweigung ausgeführt wird.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-151\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"ca14d-152\">Diese Beispiele zeigen außerdem, dass Sie in jeder bedingten Verzweigung mehrere Anweisungen verwenden können, sofern Sie sie mit `{` und `}` umschließen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-152\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"ca14d-153\">Sie können auch `||` für „or“ verwenden:</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-153\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"ca14d-154\">Ändern Sie die Werte von `a`, `b` und `c`, und wechseln Sie zwischen `&&` und `||`, um sie zu untersuchen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-154\">Modify the values of `a`, `b`, and `c` and switch between `&&` and `||` to explore.</span></span> <span data-ttu-id=\"ca14d-155\">So werden Sie besser verstehen, wie die Operatoren `&&` und `||` funktionieren.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-155\">You'll gain more understanding of how the `&&` and `||` operators work.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"ca14d-156\">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-156\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"ca14d-157\">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"ca14d-157\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="ca14d-158">Wiederholen von Vorgängen durch Schleifen</span><span class="sxs-lookup"><span data-stu-id="ca14d-158">Use loops to repeat operations</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="ca14d-159">Ein weiterer wichtiger Begriff zur Erstellung umfangreicherer Programme sind **Schleifen**.</span><span class="sxs-lookup"><span data-stu-id="ca14d-159">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="ca14d-160">Schleifen werden verwendet, um Anweisungen zu wiederholen, die mehrmals ausgeführt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="ca14d-160">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="ca14d-161">Testen Sie den folgenden Code im interaktiven Fenster:</span><span class="sxs-lookup"><span data-stu-id="ca14d-161">Try this code in the interactive window:</span></span>


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    <span data-ttu-id="ca14d-162">Die `while`-Anweisung prüft eine Bedingung und führt die Anweisung nach `while` aus.</span><span class="sxs-lookup"><span data-stu-id="ca14d-162">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="ca14d-163">Es wiederholt die Überprüfung der Bedingung und die Ausführung dieser Anweisungen, bis die Bedingung „false“ lautet.</span><span class="sxs-lookup"><span data-stu-id="ca14d-163">It will repeat checking the condition and executing those statements until the condition is false.</span></span>


    <span data-ttu-id="ca14d-164">In diesem Beispiel kommt ein weiterer neuer Operator vor.</span><span class="sxs-lookup"><span data-stu-id="ca14d-164">There's one other new operator in this example.</span></span> <span data-ttu-id="ca14d-165">Das `++`-Zeichen nach der `counter`-Variable ist der **increment**-Operator.</span><span class="sxs-lookup"><span data-stu-id="ca14d-165">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="ca14d-166">Er erhöht den Wert des Zählers um 1 und speichert diesen Wert in der Zählervariable.</span><span class="sxs-lookup"><span data-stu-id="ca14d-166">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>


    > [!IMPORTANT]

    > <span data-ttu-id="ca14d-167">Stellen Sie sicher, dass die Schleifenbedingung `while` zu „false“ wechselt, nachdem Sie den Code ausgeführt haben.</span><span class="sxs-lookup"><span data-stu-id="ca14d-167">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="ca14d-168">Erstellen Sie anderenfalls eine **Endlosschleife**, durch die das Programm niemals beendet wird.</span><span class="sxs-lookup"><span data-stu-id="ca14d-168">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="ca14d-169">Dies werden wir nicht testen, da bei der Engine, die Ihren Code ausführt, eine Zeitüberschreitung auftritt und keine Ausgabe von Ihrem Programm angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="ca14d-169">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>


    <span data-ttu-id="ca14d-170">Die `while`-Schleife testet die Bedingung, bevor der Code nach `while` ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="ca14d-170">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="ca14d-171">Die `do` ... `while`-Schleife führt den Code zuerst aus und überprüft anschließend die Bedingung.</span><span class="sxs-lookup"><span data-stu-id="ca14d-171">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="ca14d-172">Diese sieht folgendermaßen aus:</span><span class="sxs-lookup"><span data-stu-id="ca14d-172">It looks like this:</span></span>


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    <span data-ttu-id="ca14d-173">Diese `do`-Schleife und die vorherige `while`-Schleife funktionieren auf dieselbe Weise.</span><span class="sxs-lookup"><span data-stu-id="ca14d-173">This `do` loop and the earlier `while` loop work the same.</span></span>


    <span data-ttu-id="ca14d-174">Sehen wir uns nun eine letzte Schleifenanweisung an.</span><span class="sxs-lookup"><span data-stu-id="ca14d-174">Let's move on to one last loop statement.</span></span>


    > [!NOTE]

    > <span data-ttu-id="ca14d-175">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="ca14d-175">This online coding experience is in preview mode.</span></span> <span data-ttu-id="ca14d-176">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="ca14d-176">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="ca14d-177">Arbeiten mit der for-Schleife</span><span class="sxs-lookup"><span data-stu-id="ca14d-177">Work with the for loop</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="ca14d-178">Eine weitere häufig verwendete Schleifenanweisung, die bei C#-Codes vorkommt, ist die `for`-Schleife.</span><span class="sxs-lookup"><span data-stu-id="ca14d-178">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="ca14d-179">Testen Sie den folgenden Code im interaktiven Fenster:</span><span class="sxs-lookup"><span data-stu-id="ca14d-179">Try this code in the interactive window:</span></span>


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    <span data-ttu-id="ca14d-180">Dieser funktioniert auf dieselbe Weise wie die `while`-Schleife und die `do`-Schleife, die Sie bereits verwendet haben.</span><span class="sxs-lookup"><span data-stu-id="ca14d-180">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="ca14d-181">Die `for`-Anweisung besteht aus drei Teilen, die steuern, wie sie ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="ca14d-181">The `for` statement has three parts that control how it works.</span></span>


    <span data-ttu-id="ca14d-182">Der erste Teil ist der **for-Initialisierer**: `int counter = 0;` deklariert, dass `counter` die Schleifenvariable ist, und legt den Anfangswert auf `0` fest.</span><span class="sxs-lookup"><span data-stu-id="ca14d-182">The first part is the **for initializer**: `int counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>


    <span data-ttu-id="ca14d-183">Der mittlere Teil ist die **for-Bedingung**: `counter < 10` deklariert, dass diese `for`-Schleife ausgeführt wird, solange der Wert des Zählers kleiner als 10 ist.</span><span class="sxs-lookup"><span data-stu-id="ca14d-183">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>


    <span data-ttu-id="ca14d-184">Der letzte Teil ist der **for-Iterator**: `counter++` gibt an, wie die Schleifenvariable geändert wird, nachdem der Block nach der `for`-Anweisung ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="ca14d-184">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="ca14d-185">Hier gibt dieser an, dass `counter` bei jeder Blockausführung um 1 erhöht werden soll.</span><span class="sxs-lookup"><span data-stu-id="ca14d-185">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>


    <span data-ttu-id="ca14d-186">Experimentieren Sie selbst damit.</span><span class="sxs-lookup"><span data-stu-id="ca14d-186">Experiment with these yourself.</span></span> <span data-ttu-id="ca14d-187">Testen Sie Folgendes:</span><span class="sxs-lookup"><span data-stu-id="ca14d-187">Try each of the following:</span></span>


    - <span data-ttu-id="ca14d-188">Ändern Sie den Initialisierer, um mit einem anderen Wert zu beginnen.</span><span class="sxs-lookup"><span data-stu-id="ca14d-188">Change the initializer to start at a different value.</span></span>

    - <span data-ttu-id="ca14d-189">Ändern Sie die Bedingung, um an einem anderen Wert anzuhalten.</span><span class="sxs-lookup"><span data-stu-id="ca14d-189">Change the condition to stop at a different value.</span></span>


    <span data-ttu-id="ca14d-190">Wenn Sie fertig sind, fahren Sie damit fort, mithilfe der erworbenen Kenntnisse selbst Codes zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="ca14d-190">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>


    > [!NOTE]

    > <span data-ttu-id="ca14d-191">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="ca14d-191">This online coding experience is in preview mode.</span></span> <span data-ttu-id="ca14d-192">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="ca14d-192">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="ca14d-193">Kombinieren von Branches und Schleifen</span><span class="sxs-lookup"><span data-stu-id="ca14d-193">Combine branches and loops</span></span>
  durationInMinutes: 12
  content: >
    <span data-ttu-id="ca14d-194">Nachdem Sie nun die `if`-Anweisung und die Schleifenkonstrukte in der Programmiersprache C# kennengelernt haben, versuchen Sie, einen C#-Code zu schreiben, der die Summe aller ganzen Zahlen von 1 bis 20 ermittelt, die durch 3 teilbar sind.</span><span class="sxs-lookup"><span data-stu-id="ca14d-194">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="ca14d-195">Im Folgenden einige Tipps:</span><span class="sxs-lookup"><span data-stu-id="ca14d-195">Here are a few hints:</span></span>


    - <span data-ttu-id="ca14d-196">Der `%`-Operator ermittelt den Restwert einer Divisionsoperation.</span><span class="sxs-lookup"><span data-stu-id="ca14d-196">The `%` operator gives you the remainder of a division operation.</span></span>

    - <span data-ttu-id="ca14d-197">Die `if`-Anweisung ermittelt die Bedingung, um festzustellen, ob eine Zahl in der Summe berücksichtigt werden soll.</span><span class="sxs-lookup"><span data-stu-id="ca14d-197">The `if` statement gives you the condition to see if a number should be part of the sum.</span></span>

    - <span data-ttu-id="ca14d-198">Die `for`-Schleife ermöglicht es, eine Reihe von Schritten für alle Zahlen von 1 bis 20 zu wiederholen.</span><span class="sxs-lookup"><span data-stu-id="ca14d-198">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>


    <span data-ttu-id="ca14d-199">Probieren Sie es selbst aus.</span><span class="sxs-lookup"><span data-stu-id="ca14d-199">Try it yourself.</span></span> <span data-ttu-id="ca14d-200">Prüfen Sie dann, wie Sie abgeschnitten haben.</span><span class="sxs-lookup"><span data-stu-id="ca14d-200">Then check how you did.</span></span> <span data-ttu-id="ca14d-201">Hinweis: Sie sollten 63 als Antwort erhalten.</span><span class="sxs-lookup"><span data-stu-id="ca14d-201">As a hint, you should get 63 for an answer.</span></span>


    > [!NOTE]

    > <span data-ttu-id="ca14d-202">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="ca14d-202">This online coding experience is in preview mode.</span></span> <span data-ttu-id="ca14d-203">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="ca14d-203">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="ca14d-204">Übung abgeschlossen</span><span class="sxs-lookup"><span data-stu-id="ca14d-204">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="ca14d-205">Sieht ihr Code ungefähr wie der Folgende aus?</span><span class="sxs-lookup"><span data-stu-id="ca14d-205">Did you come up with something like this?</span></span>


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > <span data-ttu-id="ca14d-206">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="ca14d-206">This online coding experience is in preview mode.</span></span> <span data-ttu-id="ca14d-207">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="ca14d-207">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="ca14d-208">Herzlichen Glückwunsch!</span><span class="sxs-lookup"><span data-stu-id="ca14d-208">Congratulations!</span></span>
  content: >-
    <span data-ttu-id="ca14d-209">Sie haben das interaktive Tutorial „Verzweigungen und Schleifen“ abgeschlossen.</span><span class="sxs-lookup"><span data-stu-id="ca14d-209">You've completed the "branches and loops" interactive tutorial.</span></span> <span data-ttu-id="ca14d-210">Klicken Sie unten auf den Link **Listensammlung**, um das nächste interaktive Tutorial zu starten, oder besuchen Sie die [.NET-Website](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro), um das .NET Core SDK herunterzuladen, ein Projekt auf Ihrem Computer zu erstellen und weiter zu programmieren.</span><span class="sxs-lookup"><span data-stu-id="ca14d-210">You can click the **list collection** link below to start the next interactive tutorial, or you can visit the [.NET site](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="ca14d-211">Über den Abschnitt „Nächste Schritte“ gelangen Sie wieder zu diesen Tutorials.</span><span class="sxs-lookup"><span data-stu-id="ca14d-211">The "Next steps" section brings you back to these tutorials.</span></span>


    <span data-ttu-id="ca14d-212">Weitere Informationen zu diesen Begriffen finden Sie unter folgenden Themen:</span><span class="sxs-lookup"><span data-stu-id="ca14d-212">You can learn more about these concepts in these topics:</span></span>


    - [<span data-ttu-id="ca14d-213">if- und else-Anweisung</span><span class="sxs-lookup"><span data-stu-id="ca14d-213">If and else statement</span></span>](../../language-reference/keywords/if-else.md)

    - [<span data-ttu-id="ca14d-214">while-Anweisung</span><span class="sxs-lookup"><span data-stu-id="ca14d-214">While statement</span></span>](../../language-reference/keywords/while.md)

    - [<span data-ttu-id="ca14d-215">do-Anweisung</span><span class="sxs-lookup"><span data-stu-id="ca14d-215">Do statement</span></span>](../../language-reference/keywords/do.md)

    - [<span data-ttu-id="ca14d-216">for-Anweisung</span><span class="sxs-lookup"><span data-stu-id="ca14d-216">For statement</span></span>](../../language-reference/keywords/for.md)
